parameters:
  - name: test_duration
    type: number
    default: 2
  - name: tests
    type: object
    default: [base]

jobs:
  - job: io_build
    displayName: Build io_demo

    pool:
      name: MLNX
      demands:
        - ucx_roce -equals yes

    steps:
      # address permissions issue when some files created as read-only
      - bash: chmod u+rwx ./ -R

      - checkout: self
        clean: true
        displayName: Checkout

      - bash: |
          set -eEx

          ./autogen.sh
          ./contrib/configure-release --prefix=$PWD/__install
          make -j`nproc`

          echo "##vso[task.setvariable variable=workspace;isOutput=true]$(Build.Repository.LocalPath)/buildlib"
          echo "i'm here"
        displayName: Build
        name: build

  - job: test
    dependsOn: io_build

    pool:
      name: MLNX
      demands:
        - ucx_roce -equals yes

    strategy:
      matrix:
        ${{ each test in parameters.tests }}:
          ${{ test }}:
            test_name: ${{ test }}
      maxParallel: 1

    variables:
      workspace: $[ dependencies.io_build.outputs['build.workspace'] ]

    displayName: Test
    steps:
      - checkout: none

      - bash: |
          set -eEx
          ./buildlib/az-io_demo-server.sh
        displayName: Start server
        name: server

      - task: SSH@0
        inputs:
          sshEndpoint: ucx-roce-client
          runOptions: script
          scriptPath: $(Build.Repository.LocalPath)/buildlib/az-io_demo-test.sh
          args: "IP=$(server_ip) workspace=$(workspace) duration=${{ parameters.test_duration }}"
        displayName: Test
        timeoutInMinutes: ${{ parameters.test_duration }}

      - task: SSH@0
        inputs:
          sshEndpoint: ucx-roce-client
          runOptions: inline
          inline: |
            #!/bin/bash -leE
            if pkill -f io_demo; then
              echo "##vso[task.logissue type=warning]Client is still running, killing it"
            fi
        displayName: Kill client (if hang)
        condition: always()

      - bash: |
          set -eEx
          pid=$(server_pid)
          cd "$WORKSPACE"

          echo "Stopping the server, PID=${pid}"
          if ! kill ${pid}; then
            cat server.log
            echo "##vso[task.logissue type=error]Server doesn't exist"
            echo "##vso[task.complete result=Failed;]"
          else
            cat server.log
            echo "Server stopped successfully"
          fi
        displayName: Kill the server
        condition: always()
